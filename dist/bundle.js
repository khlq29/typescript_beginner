(()=>{"use strict";var __webpack_modules__={879:()=>{eval("\n;// CONCATENATED MODULE: ./src/components/base-component.ts\nconst something = '...';\nclass Component {\n    templateElement;\n    hostElement;\n    element;\n    constructor(templateId, hostElementId, insertAtStart, newELementId) {\n        this.templateElement = document.getElementById(templateId);\n        this.hostElement = document.getElementById(hostElementId);\n        const importedNode = document.importNode(this.templateElement.content, true);\n        this.element = importedNode.firstElementChild;\n        if (newELementId) {\n            this.element.id = newELementId;\n        }\n        this.attach(insertAtStart);\n    }\n    attach(insertAtBeginning) {\n        this.hostElement.insertAdjacentElement(insertAtBeginning ? 'afterbegin' : 'beforeend', this.element);\n    }\n}\n\n;// CONCATENATED MODULE: ./src/decorators/autobind.ts\nfunction Autobind(target, methodName, descriptor) {\n    const originalMethod = descriptor.value;\n    const adjDescriptor = {\n        configurable: true,\n        get() {\n            const boundFn = originalMethod.bind(this);\n            return boundFn;\n        }\n    };\n    return adjDescriptor;\n}\n\n;// CONCATENATED MODULE: ./src/utils/validation.ts\nfunction validate(validatableInput) {\n    let isValid = true;\n    if (validatableInput.required) {\n        isValid = isValid && validatableInput.value?.toString().trim().length !== 0;\n    }\n    if (validatableInput.minLength != null && typeof validatableInput.value === 'string') {\n        isValid = isValid && validatableInput.value.length >= validatableInput.minLength;\n    }\n    if (validatableInput.maxLength != null && typeof validatableInput.value === 'string') {\n        isValid = isValid && validatableInput.value.length <= validatableInput.maxLength;\n    }\n    if (validatableInput.min != null && typeof validatableInput.value === 'number') {\n        isValid = isValid && validatableInput.value >= validatableInput.min;\n    }\n    if (validatableInput.max != null && typeof validatableInput.value === 'number') {\n        isValid = isValid && validatableInput.value <= validatableInput.max;\n    }\n    return isValid;\n}\n\n;// CONCATENATED MODULE: ./src/models/project.ts\nvar ProjectStatus;\n(function (ProjectStatus) {\n    ProjectStatus[ProjectStatus[\"Active\"] = 0] = \"Active\";\n    ProjectStatus[ProjectStatus[\"Finished\"] = 1] = \"Finished\";\n})(ProjectStatus || (ProjectStatus = {}));\nclass Project {\n    id;\n    title;\n    description;\n    people;\n    status;\n    constructor(id, title, description, people, status) {\n        this.id = id;\n        this.title = title;\n        this.description = description;\n        this.people = people;\n        this.status = status;\n    }\n}\n\n;// CONCATENATED MODULE: ./src/state/project-state.ts\n\nclass State {\n    listeners = [];\n    addListener(listenerFn) {\n        this.listeners.push(listenerFn);\n    }\n}\nclass ProjectState extends State {\n    projects = [];\n    static instance;\n    constructor() {\n        super();\n    }\n    static getInstance() {\n        if (this.instance) {\n            return this.instance;\n        }\n        this.instance = new ProjectState();\n        return this.instance;\n    }\n    addProject(title, description, numOfPeople) {\n        const newProject = new Project(Math.random().toString(), title, description, numOfPeople, ProjectStatus.Active);\n        this.projects.push(newProject);\n        this.updateListeners();\n    }\n    moveProject(projectId, newStatus) {\n        const project = this.projects.find(prj => prj.id === projectId);\n        if (project && project.status !== newStatus) {\n            project.status = newStatus;\n            this.updateListeners();\n        }\n    }\n    updateListeners() {\n        for (const listenerFn of this.listeners) {\n            listenerFn(this.projects.slice());\n        }\n    }\n}\nconst projectState = ProjectState.getInstance();\n\n;// CONCATENATED MODULE: ./src/components/project-input.ts\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\nclass ProjectInput extends Component {\n    titleInputElement;\n    descriptionInputElement;\n    peopleInputElement;\n    constructor() {\n        super('project-input', 'app', true, 'user-input');\n        this.titleInputElement = this.element.querySelector('#title');\n        this.descriptionInputElement = this.element.querySelector('#description');\n        this.peopleInputElement = this.element.querySelector('#people');\n        this.configure();\n    }\n    configure() {\n        this.element.addEventListener('submit', this.submitHandler);\n    }\n    renderContent() { }\n    gatherUserInput() {\n        const enteredTitle = this.titleInputElement.value;\n        const enteredDescription = this.descriptionInputElement.value;\n        const enteredPeople = this.peopleInputElement.value;\n        const titleValidatable = {\n            value: enteredTitle,\n            required: true,\n        };\n        const descriptionValidatable = {\n            value: enteredDescription,\n            required: true,\n            minLength: 5\n        };\n        const peopleValidatable = {\n            value: +enteredPeople,\n            required: true,\n            min: 1,\n            max: 5\n        };\n        if (!validate(titleValidatable) ||\n            !validate(descriptionValidatable) ||\n            !validate(peopleValidatable)) {\n            alert('Invalid input, please try again!');\n            return;\n        }\n        else {\n            return [enteredTitle, enteredDescription, +enteredPeople];\n        }\n    }\n    clearInputs() {\n        this.titleInputElement.value = '';\n        this.descriptionInputElement.value = '';\n        this.peopleInputElement.value = '';\n    }\n    submitHandler(event) {\n        event.preventDefault();\n        const userInput = this.gatherUserInput();\n        if (Array.isArray(userInput)) {\n            const [title, desc, people] = userInput;\n            console.log(title, desc, people);\n            projectState.addProject(title, desc, people);\n            this.clearInputs();\n        }\n    }\n}\n__decorate([\n    Autobind\n], ProjectInput.prototype, \"submitHandler\", null);\n\n;// CONCATENATED MODULE: ./src/components/project-item.ts\nvar project_item_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\nclass ProjectItem extends Component {\n    project;\n    get persons() {\n        if (this.project.people === 1) {\n            return '1 person';\n        }\n        else {\n            return `${this.project.people} persons`;\n        }\n    }\n    constructor(hostId, project) {\n        super('single-project', hostId, false, project.id);\n        this.project = project;\n        this.configure();\n        this.renderContent();\n    }\n    dragStartHandler(event) {\n        event.dataTransfer.setData('text/plain', this.project.id);\n        event.dataTransfer.effectAllowed = 'move';\n    }\n    dragEndHandler(event) {\n        console.log('DragEnd');\n    }\n    configure() {\n        this.element.addEventListener('dragstart', this.dragStartHandler);\n        this.element.addEventListener('dragend', this.dragEndHandler);\n    }\n    renderContent() {\n        this.element.querySelector('h2').textContent = this.project.title;\n        this.element.querySelector('h3').textContent = this.persons + ' assigned';\n        this.element.querySelector('p').textContent = this.project.description;\n    }\n}\nproject_item_decorate([\n    Autobind\n], ProjectItem.prototype, \"dragStartHandler\", null);\n\n;// CONCATENATED MODULE: ./src/components/project-list.ts\nvar project_list_decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\n\n\n\n\nclass ProjectList extends Component {\n    type;\n    assignedProjects;\n    constructor(type) {\n        super('project-list', 'app', false, `${type}-projects`);\n        this.type = type;\n        this.assignedProjects = [];\n        this.element.id = `${this.type}-projects`;\n        this.configure();\n        this.renderContent();\n    }\n    dragOverHandler(event) {\n        if (event.dataTransfer && event.dataTransfer.types[0] === 'text/plain') {\n            event.preventDefault();\n            const listEl = this.element.querySelector('ul');\n            listEl.classList.add('droppable');\n        }\n    }\n    dropHandler(event) {\n        const prjId = event.dataTransfer.getData('text/plain');\n        projectState.moveProject(prjId, this.type === 'active' ? ProjectStatus.Active : ProjectStatus.Finished);\n    }\n    dragLeavehandler(event) {\n        const listEl = this.element.querySelector('ul');\n        listEl.classList.remove('droppable');\n    }\n    configure() {\n        this.element.addEventListener('dragover', this.dragOverHandler);\n        this.element.addEventListener('dragleave', this.dragLeavehandler);\n        this.element.addEventListener('drop', this.dropHandler);\n        projectState.addListener((projects) => {\n            const relevantProjects = projects.filter(prj => {\n                if (this.type === 'active') {\n                    return prj.status === ProjectStatus.Active;\n                }\n                return prj.status === ProjectStatus.Finished;\n            });\n            this.assignedProjects = relevantProjects;\n            this.renderProject();\n        });\n    }\n    renderContent() {\n        const listId = `${this.type}-projects-list`;\n        this.element.querySelector('ul').id = listId;\n        this.element.querySelector('h2').textContent = this.type.toUpperCase() + ' PROJECTS';\n    }\n    renderProject() {\n        const listEl = document.getElementById(`${this.type}-projects-list`);\n        listEl.innerHTML = '';\n        for (const prjItem of this.assignedProjects) {\n            new ProjectItem(this.element.querySelector('ul').id, prjItem);\n        }\n    }\n}\nproject_list_decorate([\n    Autobind\n], ProjectList.prototype, \"dragOverHandler\", null);\nproject_list_decorate([\n    Autobind\n], ProjectList.prototype, \"dropHandler\", null);\nproject_list_decorate([\n    Autobind\n], ProjectList.prototype, \"dragLeavehandler\", null);\n\n;// CONCATENATED MODULE: ./src/app.ts\n\n\nconst prjInput = new ProjectInput();\nconst activePrjList = new ProjectList('active');\nconst finishedPrjList = new ProjectList('finished');\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///879\n")}},__webpack_exports__={};__webpack_modules__[879]()})();